#!/usr/bin/env python

import subprocess
import string
import os
import socket


def format_filename(s):
    """Take a string and return a valid filename constructed from the string.
Uses a whitelist approach: any characters not present in valid_chars are
removed. Also spaces are replaced with underscores.

Note: this method may produce invalid filenames such as ``, `.` or `..`
When I use this method I prepend a date string like '2009_01_15_19_46_32_'
and append a file extension like '.txt', so I avoid the potential of using
an invalid filename.

"""
    valid_chars = "-_.() %s%s" % (string.ascii_letters, string.digits)
    filename = ''.join(c for c in s if c in valid_chars)
    filename = filename.replace(' ', '_')  # I don't like spaces in filenames.
    return filename.lstrip('-_')


def get_run_cfg(cfg, default):
    result = dict(default)
    result.update(cfg)
    result['slot'] = '--nightly %s ' % result['slot'] if result['slot'] else ''
    return result


def get_collect_cfg(dirname, cfg, default):
    result = dict(default)
    result.update(cfg)
    result['folder'] = dirname
    result['version'] = get_version(cfg)
    result['date'] = '2016-02-14 10:00'
    result['start'] = '2016-02-14 10:00'
    result['end'] = '2016-02-14 10:00'
    result['host'] = socket.gethostname()

    return result

def get_version(cfg):
    result = ''
    if cfg['version'] == 'HEAD':
        return cfg['slot']+'.1'
    return cfg['version']

def get_dirname(cfg, default):
    config = dict(default)
    config.update(cfg)

    return format_filename("{slot}_{cmtconfig}_{version}".format(**config))
 

cmd = 'lb-run {slot}  -c {cmtconfig}  Geant4 {version} run_hadronic_tests.py'
collect = ('~/Dev/LHCbPR2HD/collectRunResults.py  -r {folder} --app-name GEANT'
           ' --app-version {version}'
           ' --app-version-datetime "{date}"'
           ' --opt-name "GEANT_RUNHADRONIC"'
           ' --opt-content "runhadronic.py"'
           ' --opt-standalone'
           ' --setup-name "default"'
           ' --setup-content " --no-user-area"'
           ' -s "{start}" -e "{end}"'
           ' -p {host}'
           ' -c {cmtconfig}'
           ' -l GeantStandaloneHandler')

default = {
    'slot': '',
    'cmtconfig': 'x86_64-slc6-gcc49-opt',
    'version': 'HEAD'
}

configs = [
    {
        'slot': 'lhcb-gauss-dev',
        'cmtconfig': 'x86_64-slc6-gcc48-opt',
        'version': 'HEAD'
    },
    {
        'cmtconfig': 'x86_64-slc6-gcc48-opt',
        'version': 'v96r4p2'
    },
    {
        'cmtconfig': 'x86_64-slc6-gcc49-opt',
        'version': 'v96r4p2'
    }
]

for cfg in configs:
    real_cfg = get_run_cfg(cfg, default)
    dirname = get_dirname(cfg, default)
    exe = cmd.format(**real_cfg)
    if not os.path.exists(dirname):
        os.mkdir(dirname)

    print(collect.format(**get_collect_cfg(dirname, cfg, default)))
    # subprocess.call("cd %s && %s" % (dirname, exe), shell=True)
